*jetpack.txt*   The lighting-fast plugin manager

Version: 0.0.0
Author: TANIGUCHI Masaya <taniguchi@masaya.info>
License: MIT

================================================================================
Introduction ( *jetpack-introduction* )

The **lightning-fast** minimalist plugin manager for Vim/ Neovim. vim-jetpack is
a jetpack for the most of vimmers. Unbelievably, it is faster than vimrc uses
the built-in plugin manager only.

- Lightning-fast startup
    - It optimizes the search algorithm for the runtimepath
- Single file plugin
    - You need to just put the single file to use this software
- Multiple DSLs (Domain Specific Languages)
    - You can use a favorite notations, which are similar to vim-plug,
      dein.vim, packer.nvim, and paq.nvim
- Fancy UI (User Interface)
    - You can see a progress of installation with a graphical interface
- `pack/*/start`-free architecture.
    - Installed plugins do not pollutes your vim until calling `g:jetpack.`-functions

================================================================================
Functions ( *jetpack-functions* )

g:jetpack.add({repo} [, {options}])                           *g:jetpack.add()*
    {repo} is a pair of string concatenated with `/` such as `tani/vim-jetpack`.
    {options} is a dictionary consits of the following. See also
    |g:jetpack.add-options|.

    vim-plug interface
    |   name   |        type        | description                           |
    | -------- | ------------------ | ------------------------------------- |
    |  branch  |       string       | Branch of the repository to use       |
    |   tag    |       string       | Tag of the repository to use          |
    |  commit  |       string       | Commit of the repository to use       |
    |    rtp   |       string       | Subdirectory that contains Vim plugin |
    |    dir   |       string       | Custom directory for the plugin       |
    |    as    |       string       | Use different name for plugin         |
    |    do    |  string  or  func  | Post-updat hook                       |
    |  frozen  |      boolean       | Do not update                         |
    |    on    |  string  or  list  | lazy loading: Commands, <Plug>,Events |
    |    for   |  string  or  list  | lazy loading: File types              |

    Vim 8/ Neovim |packages| interface
    |   name   |        type        | description                           |
    | -------- | ------------------ | ------------------------------------- |
    |    opt   |      boolean       | On-demand loading: packadd {name}     |

g:jetpack.begin([{path}])                                    *g:jetpack.begin()*
    The function setups jetpack plugins. All plugin declarations should be
    placed after this function. You can give {path} if you want to use another
    directory to manage plugins.

g:jetpack.end()                                                *g:jetpack.end()*
    The function loads declared plugins. All plugin declarations should be
    placed before this function.

g:jetpack.sync()                                              *g:jetpack.sync()*
    The function performs to install, update, and bundle all plugins.
    The function is evenrything all you need to know.
    You must run this function after a change of your configuration.

g:jetpack.tap({name})                                          *g:jetpack.tap()*
    It returns |TRUE| if the plugin is available, otherwise it returns |FALSE|.

g:jetpack.get({name})                                          *g:jetpack.get()*
    It returns metadata of the plugin if possible, otherwise it returns `{}` .
    This is the same as `dein#get` of `dein.vim`.

g:jetpack.names()                                            *g:jetpack.names()*
    It returns the list of plugin names registered including unavailable
    plugins. Please use it with |g:jetpack.tap()|.

Jetpack expoted some other functions but they are only for the developers.
Unlisted functions might be changed without any announcements in the future.

================================================================================
Commands ( *jetpack-commands* )

Jetpack {repo} [, {options}]                                           *Jetpack*
    A command version of |g:jetpack.add()|.
    It is useful for the vim-plug sytle declaration of plugins in vimrc.

JetpackSync                                                        *JetpackSync*
    A command version of |g:jetpack.sync()|.
    The above command |Jetpack| is only available between |g:jetpack.begin()|
    and |g:jetpack.end()|. Thus, you can use the shorthand `J` to call this
    command.

================================================================================
Variables ( *jetpack-variables* )

g:jetpack.ignore_patterns                         *g:g:jetpack.ignore_patterns*
    The list of glob-patterns is used to skip duplicated files.
    Jetpack aggressively bundles plugins if you extend this list.
    The following example skip bunding any JSON files.
    >
    > call add(g:jetpack.ignore_patterns, '/*.json')

g:jetpack.copy_method                                *g:g:jetpack.copy_method*
    The default value is `'system'`.
    Consider using the `'copy'` if you have some trouble to run the
    external commands. `'hardlink'` and `'symlink'` are faster than `'copy'`
    but these are available in Neovim only.
    - `'system'` Use `cp`/ `xcopy` to copy files.
    - `'copy'` Use |readfile| and |writefile| to copy files.
    - `'hardlink'` Use |vim.loop| to make hardlink of files.
    - `'symlink'` Use |vim.loop| to make symlink of files.

================================================================================
Events ( *jetpack-events* )

User Jetpack{PluginName}Pre                             *User-Jetpack-pre-event*
User Jetpack{PluginName}Post                           *User-Jetpack-post-event*
    Let {PluginName} be a CamelCase of plugin name.
        vim-jetpack -> VimJetpack
        goyo.vim    -> GoyoVim
        vim_foo     -> VimFoo
    Code to execute when the plugin is lazily loaded on demand with
    `User Jetpack{PluginName}Post` .
    It is impossible to hook `packadd` for a lua plugin in Neovim,
    because Neovim does not load any files until the module is required.

================================================================================
Groups ( *jetpack-groups* )

Jetpack                                                         *Jetpack-group*
    Jetpack's on-demand loading uses autocommands defined under the `Jetpack`
    |autocmd-groups| .

================================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
